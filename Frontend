import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:file_picker/file_picker.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;

void main() {
  runApp(BebaApp());
}

class BebaApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Beba - Ride With Confidence',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        scaffoldBackgroundColor: Colors.grey[100],
        textTheme: TextTheme(
          headline6: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          bodyText2: TextStyle(fontSize: 16),
        ),
      ),
      home: AuthWrapper(),
    );
  }
}

class AuthWrapper extends StatefulWidget {
  @override
  _AuthWrapperState createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  String? token;
  bool? isDriver;

  @override
  void initState() {
    super.initState();
    _checkToken();
  }

  Future<void> _checkToken() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      token = prefs.getString('token');
      isDriver = prefs.getBool('is_driver') ?? false;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (token == null) {
      return LoginScreen();
    } else if (JwtDecoder.isExpired(token!)) {
      return LoginScreen();
    } else {
      return DashboardScreen(token: token!, isDriver: isDriver!);
    }
  }
}

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;

  Future<void> _login() async {
    setState(() => _isLoading = true);
    final response = await http.post(
      Uri.parse('https://yourdomain.com/login'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'email': _emailController.text.trim(),
        'password': _passwordController.text,
      }),
    );
    setState(() => _isLoading = false);
    if (response.statusCode == 200) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      var data = jsonDecode(response.body);
      String token = data['access_token'];
      bool isDriver = data['is_driver'];
      await prefs.setString('token', token);
      await prefs.setBool('is_driver', isDriver);
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => DashboardScreen(token: token, isDriver: isDriver)));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Login failed: ${jsonDecode(response.body)['error'] ?? 'Unknown error'}')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Beba Login')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Center(
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Welcome to Beba', style: Theme.of(context).textTheme.headline6),
                SizedBox(height: 20),
                TextField(
                  controller: _emailController,
                  decoration: InputDecoration(
                    labelText: 'Email',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.email),
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: _passwordController,
                  decoration: InputDecoration(
                    labelText: 'Password',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.lock),
                  ),
                  obscureText: true,
                ),
                SizedBox(height: 20),
                _isLoading
                    ? CircularProgressIndicator()
                    : ElevatedButton(
                        onPressed: _login,
                        style: ElevatedButton.styleFrom(minimumSize: Size(double.infinity, 50)),
                        child: Text('Login'),
                      ),
                SizedBox(height: 10),
                TextButton(
                  onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => SignupScreen())),
                  child: Text('Donâ€™t have an account? Sign Up'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SignupScreen extends StatefulWidget {
  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _fullNameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _idController = TextEditingController();
  final _kraController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isDriver = false;
  bool _isLoading = false;

  Future<void> _signup() async {
    setState(() => _isLoading = true);
    final response = await http.post(
      Uri.parse('https://yourdomain.com/signup'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'full_name': _fullNameController.text.trim(),
        'phone': _phoneController.text.trim(),
        'id_number': _idController.text.trim(),
        'kra_pin': _kraController.text.trim(),
        'email': _emailController.text.trim(),
        'password': _passwordController.text,
        'is_driver': _isDriver,
      }),
    );
    setState(() => _isLoading = false);
    if (response.statusCode == 201) {
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Signup successful! Please login.')));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Signup failed: ${jsonDecode(response.body)['error'] ?? 'Unknown error'}')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Sign Up')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Create Your Beba Account', style: Theme.of(context).textTheme.headline6),
              SizedBox(height: 20),
              TextField(controller: _fullNameController, decoration: InputDecoration(labelText: 'Full Name', border: OutlineInputBorder())),
              SizedBox(height: 10),
              TextField(controller: _phoneController, decoration: InputDecoration(labelText: 'Phone Number', border: OutlineInputBorder())),
              SizedBox(height: 10),
              TextField(controller: _idController, decoration: InputDecoration(labelText: 'ID Number', border: OutlineInputBorder())),
              SizedBox(height: 10),
              TextField(controller: _kraController, decoration: InputDecoration(labelText: 'KRA PIN', border: OutlineInputBorder())),
              SizedBox(height: 10),
              TextField(controller: _emailController, decoration: InputDecoration(labelText: 'Email', border: OutlineInputBorder())),
              SizedBox(height: 10),
              TextField(controller: _passwordController, decoration: InputDecoration(labelText: 'Password', border: OutlineInputBorder()), obscureText: true),
              SizedBox(height: 10),
              CheckboxListTile(
                title: Text('Register as Driver'),
                value: _isDriver,
                onChanged: (value) => setState(() => _isDriver = value!),
                controlAffinity: ListTileControlAffinity.leading,
              ),
              SizedBox(height: 20),
              _isLoading
                  ? Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                      onPressed: _signup,
                      style: ElevatedButton.styleFrom(minimumSize: Size(double.infinity, 50)),
                      child: Text('Sign Up'),
                    ),
            ],
          ),
        ),
      ),
    );
  }
}

class DashboardScreen extends StatefulWidget {
  final String token;
  final bool isDriver;
  DashboardScreen({required this.token, required this.isDriver});

  @override
  _DashboardScreenState createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  late IO.Socket socket;
  List<Map<String, dynamic>> vehicles = [];
  List<Map<String, dynamic>> availableVehicles = [];
  List<Map<String, dynamic>> rentals = [];
  List<Map<String, dynamic>> shamba = [];
  List<Map<String, dynamic>> apartments = [];
  List<Map<String, dynamic>> transportJobs = [];
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _connectSocket();
    _loadData();
  }

  void _connectSocket() {
    socket = IO.io('https://yourdomain.com', <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
    });
    socket.connect();
    socket.onConnect((_) => print('Socket connected'));
    socket.on('vehicle_added', (data) => _loadVehicles());
    socket.on('booking', (data) => _loadAvailableVehicles());
    socket.on('rentals_added', (data) => _loadListings('rentals'));
    socket.on('shamba_added', (data) => _loadListings('shamba'));
    socket.on('apartments_added', (data) => _loadListings('apartments'));
    socket.on('transport_job_added', (data) => _loadTransportJobs());
    socket.on('payment_confirmed', (data) => _loadData());
    socket.onDisconnect((_) => print('Socket disconnected'));
  }

  Future<void> _loadData() async {
    setState(() => _isLoading = true);
    await Future.wait([
      _loadVehicles(),
      _loadAvailableVehicles(),
      _loadListings('rentals'),
      _loadListings('shamba'),
      _loadListings('apartments'),
      if (widget.isDriver) _loadTransportJobs(),
    ]);
    setState(() => _isLoading = false);
  }

  Future<void> _loadVehicles() async {
    final response = await http.get(Uri.parse('https://yourdomain.com/vehicles'), headers: {'Authorization': 'Bearer ${widget.token}'});
    if (response.statusCode == 200) {
      setState(() => vehicles = List<Map<String, dynamic>>.from(jsonDecode(response.body)));
    }
  }

  Future<void> _loadAvailableVehicles() async {
    final response = await http.get(Uri.parse('https://yourdomain.com/listings/vehicles'), headers: {'Authorization': 'Bearer ${widget.token}'});
    if (response.statusCode == 200) {
      setState(() => availableVehicles = List<Map<String, dynamic>>.from(jsonDecode(response.body)));
    }
  }

  Future<void> _loadListings(String type) async {
    final response = await http.get(Uri.parse('https://yourdomain.com/listings/$type'), headers: {'Authorization': 'Bearer ${widget.token}'});
    if (response.statusCode == 200) {
      setState(() {
        if (type == 'rentals') rentals = List<Map<String, dynamic>>.from(jsonDecode(response.body));
        else if (type == 'shamba') shamba = List<Map<String, dynamic>>.from(jsonDecode(response.body));
        else if (type == 'apartments') apartments = List<Map<String, dynamic>>.from(jsonDecode(response.body));
      });
    }
  }

  Future<void> _loadTransportJobs({String pickup = '', String destination = ''}) async {
    final response = await http.get(
      Uri.parse('https://yourdomain.com/transport_jobs?pickup_location=$pickup&destination=$destination'),
      headers: {'Authorization': 'Bearer ${widget.token}'},
    );
    if (response.statusCode == 200) {
      setState(() => transportJobs = List<Map<String, dynamic>>.from(jsonDecode(response.body)));
    }
  }

  Future<void> _addVehicle() async {
    final reg = TextEditingController();
    final type = TextEditingController();
    final tons = TextEditingController();
    PlatformFile? image;

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add Vehicle (Free)'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(controller: reg, decoration: InputDecoration(labelText: 'Vehicle Registration')),
              TextField(controller: type, decoration: InputDecoration(labelText: 'Vehicle Type')),
              TextField(controller: tons, decoration: InputDecoration(labelText: 'Tons')),
              ElevatedButton(
                onPressed: () async {
                  final result = await FilePicker.platform.pickFiles(type: FileType.image);
                  if (result != null) image = result.files.first;
                },
                child: Text('Pick Image'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              var request = http.MultipartRequest('POST', Uri.parse('https://yourdomain.com/vehicles'));
              request.headers['Authorization'] = 'Bearer ${widget.token}';
              request.fields['vehicle_reg'] = reg.text;
              request.fields['vehicle_type'] = type.text;
              if (tons.text.isNotEmpty) request.fields['tons'] = tons.text;
              if (image != null) request.files.add(await http.MultipartFile.fromPath('image', image!.path!));
              final response = await request.send();
              if (response.statusCode == 201) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Vehicle added successfully (free)')));
                _loadVehicles();
              } else {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to add vehicle')));
              }
            },
            child: Text('Add'),
          ),
        ],
      ),
    );
  }

  Future<void> _bookVehicle(int vehicleId) async {
    final pickup = TextEditingController();
    final destination = TextEditingController();
    final budget = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Book Vehicle (Ksh 100)'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('You will be prompted to pay Ksh 100 via M-Pesa.'),
              TextField(controller: pickup, decoration: InputDecoration(labelText: 'Pickup Location')),
              TextField(controller: destination, decoration: InputDecoration(labelText: 'Destination')),
              TextField(controller: budget, decoration: InputDecoration(labelText: 'Budget')),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              final response = await http.post(
                Uri.parse('https://yourdomain.com/book_vehicle/$vehicleId'),
                headers: {'Authorization': 'Bearer ${widget.token}', 'Content-Type': 'application/json'},
                body: jsonEncode({
                  'pickup': pickup.text,
                  'destination': destination.text,
                  'budget': int.parse(budget.text),
                }),
              );
              if (response.statusCode == 202) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please complete Ksh 100 payment on your phone.')));
                _loadAvailableVehicles();
              } else {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Booking failed: ${jsonDecode(response.body)['error'] ?? 'Unknown error'}')));
              }
            },
            child: Text('Initiate Payment'),
          ),
        ],
      ),
    );
  }

  Future<void> _addListing(String type) async {
    final location = TextEditingController();
    final details = TextEditingController();
    final price = TextEditingController();
    List<PlatformFile>? images;
    PlatformFile? titleDeed;

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add $type Listing (Ksh 100)'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('You will be prompted to pay Ksh 100 via M-Pesa.'),
              TextField(controller: location, decoration: InputDecoration(labelText: 'Location')),
              TextField(controller: details, decoration: InputDecoration(labelText: type == 'Rentals' ? 'House Type' : 'Details')),
              TextField(controller: price, decoration: InputDecoration(labelText: 'Price')),
              ElevatedButton(
                onPressed: () async {
                  final result = await FilePicker.platform.pickFiles(type: FileType.image, allowMultiple: true);
                  if (result != null) images = result.files;
                },
                child: Text('Pick Images'),
              ),
              if (type == 'Shamba')
                ElevatedButton(
                  onPressed: () async {
                    final result = await FilePicker.platform.pickFiles(type: FileType.any);
                    if (result != null) titleDeed = result.files.first;
                  },
                  child: Text('Pick Title Deed'),
                ),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              var request = http.MultipartRequest('POST', Uri.parse('https://yourdomain.com/listings/${type.toLowerCase()}s'));
              request.headers['Authorization'] = 'Bearer ${widget.token}';
              request.fields['location'] = location.text;
              request.fields['details'] = details.text;
              request.fields['price'] = price.text;
              if (images != null) {
                for (var img in images!) {
                  request.files.add(await http.MultipartFile.fromPath('images', img.path!));
                }
              }
              if (type == 'Shamba' && titleDeed != null) {
                request.files.add(await http.MultipartFile.fromPath('title_deed', titleDeed!.path!));
              }
              final response = await request.send();
              if (response.statusCode == 202) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please complete Ksh 100 payment on your phone.')));
                _loadListings('${type.toLowerCase()}s');
              } else {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to add listing')));
              }
            },
            child: Text('Initiate Payment'),
          ),
        ],
      ),
    );
  }

  Future<void> _addTransportJob() async {
    final pickup = TextEditingController();
    final destination = TextEditingController();
    final description = TextEditingController();
    final budget = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Post Transport Job (Ksh 100)'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('You will be prompted to pay Ksh 100 via M-Pesa.'),
              TextField(controller: pickup, decoration: InputDecoration(labelText: 'Pickup Location')),
              TextField(controller: destination, decoration: InputDecoration(labelText: 'Destination')),
              TextField(controller: description, decoration: InputDecoration(labelText: 'Description')),
              TextField(controller: budget, decoration: InputDecoration(labelText: 'Budget')),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              final response = await http.post(
                Uri.parse('https://yourdomain.com/transport_jobs'),
                headers: {'Authorization': 'Bearer ${widget.token}', 'Content-Type': 'application/json'},
                body: jsonEncode({
                  'pickup_location': pickup.text,
                  'destination': destination.text,
                  'description': description.text,
                  'budget': int.parse(budget.text),
                }),
              );
              if (response.statusCode == 202) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please complete Ksh 100 payment on your phone.')));
                _loadTransportJobs();
              } else {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to post job: ${jsonDecode(response.body)['error'] ?? 'Unknown error'}')));
              }
            },
            child: Text('Initiate Payment'),
          ),
        ],
      ),
    );
  }

  Future<void> _searchTransportJobs() async {
    final pickup = TextEditingController();
    final destination = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Search Transport Jobs'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(controller: pickup, decoration: InputDecoration(labelText: 'Pickup Location')),
            TextField(controller: destination, decoration: InputDecoration(labelText: 'Destination')),
          ],
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              await _loadTransportJobs(pickup: pickup.text, destination: destination.text);
            },
            child: Text('Search'),
          ),
        ],
      ),
    );
  }

  Future<void> _addInsurance() async {
    final vehicleId = TextEditingController();
    final policyNumber = TextEditingController();
    final expiryDate = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add Insurance (Free)'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(controller: vehicleId, decoration: InputDecoration(labelText: 'Vehicle ID')),
              TextField(controller: policyNumber, decoration: InputDecoration(labelText: 'Policy Number')),
              TextField(controller: expiryDate, decoration: InputDecoration(labelText: 'Expiry Date (YYYY-MM-DD)')),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: Text('Cancel')),
          TextButton(
            onPressed: () async {
              final response = await http.post(
                Uri.parse('https://yourdomain.com/insurance'),
                headers: {'Authorization': 'Bearer ${widget.token}', 'Content-Type': 'application/json'},
                body: jsonEncode({
                  'vehicle_id': int.parse(vehicleId.text),
                  'policy_number': policyNumber.text,
                  'expiry_date': expiryDate.text,
                }),
              );
              if (response.statusCode == 201) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Insurance added successfully (free)')));
              } else {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to add insurance')));
              }
            },
            child: Text('Add'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Beba Dashboard'),
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () async {
              SharedPreferences prefs = await SharedPreferences.getInstance();
              await prefs.remove('token');
              await prefs.remove('is_driver');
              Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => LoginScreen()));
            },
          ),
        ],
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ElevatedButton(onPressed: _addVehicle, child: Text('Add Vehicle (Free)')),
                  SizedBox(height: 10),
                  Text('My Vehicles:', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 5),
                  ...vehicles.map((v) => Card(
                        child: ListTile(
                          title: Text('${v['vehicle_type']} - ${v['vehicle_reg']}'),
                          subtitle: Text('Tons: ${v['tons'] ?? 'N/A'} | Created: ${v['created_at']}'),
                        ),
                      )),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: () => _addListing('Rentals'), child: Text('Add Rental Listing (Ksh 100)')),
                  SizedBox(height: 10),
                  Text('My Rentals:', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 5),
                  ...rentals.map((r) => Card(
                        child: ListTile(
                          title: Text(r['details']),
                          subtitle: Text('${r['location']} - Ksh ${r['price']} | Created: ${r['created_at']}'),
                        ),
                      )),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: () => _addListing('Shamba'), child: Text('Add Shamba Listing (Ksh 100)')),
                  SizedBox(height: 10),
                  Text('My Shamba:', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 5),
                  ...shamba.map((s) => Card(
                        child: ListTile(
                          title: Text(s['details']),
                          subtitle: Text('${s['location']} - Ksh ${s['price']} | Created: ${s['created_at']}'),
                        ),
                      )),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: () => _addListing('Apartments'), child: Text('Add Apartment Listing (Ksh 100)')),
                  SizedBox(height: 10),
                  Text('My Apartments:', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 5),
                  ...apartments.map((a) => Card(
                        child: ListTile(
                          title: Text(a['details']),
                          subtitle: Text('${a['location']} - Ksh ${a['price']} | Created: ${a['created_at']}'),
                        ),
                      )),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: _addInsurance, child: Text('Add Insurance (Free)')),
                  SizedBox(height: 20),
                  ElevatedButton(onPressed: _addTransportJob, child: Text('Post Transport Job (Ksh 100)')),
                  SizedBox(height: 10),
                  if (widget.isDriver) ...[
                    ElevatedButton(onPressed: _searchTransportJobs, child: Text('Search Transport Jobs')),
                    SizedBox(height: 10),
                    Text('Available Transport Jobs:', style: Theme.of(context).textTheme.headline6),
                    SizedBox(height: 5),
                    ...transportJobs.map((j) => Card(
                          child: ListTile(
                            title: Text('${j['pickup_location']} to ${j['destination']}'),
                            subtitle: Text('Description: ${j['description']} | Budget: Ksh ${j['budget']} | Posted: ${j['timestamp']}'),
                          ),
                        )),
                  ],
                  SizedBox(height: 20),
                  Text('Available Vehicles:', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 5),
                  ...availableVehicles.map((v) => Card(
                        child: ListTile(
                          title: Text('${v['vehicle_type']} - ${v['vehicle_reg']}'),
                          subtitle: Text('Tons: ${v['tons'] ?? 'N/A'}'),
                          trailing: ElevatedButton(
                            onPressed: () => _bookVehicle(v['id']),
                            child: Text('Book (Ksh 100)'),
                          ),
                        ),
                      )),
                ],
              ),
            ),
    );
  }
}
