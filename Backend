# app.py (Updated Version)
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy.exc import SQLAlchemyError
import requests
import base64
import datetime
import os
from dotenv import load_dotenv
import boto3
from flask_socketio import SocketIO, emit
import smtplib
from email.mime.text import MIMEText
import logging
from functools import wraps

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'postgresql://user:password@localhost/beba')
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your-secret-key')
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'jwt-secret-key')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
jwt = JWTManager(app)
socketio = SocketIO(app, cors_allowed_origins="*")

# AWS S3 Setup
s3_client = boto3.client('s3', aws_access_key_id=os.getenv('AWS_ACCESS_KEY'), aws_secret_access_key=os.getenv('AWS_SECRET_KEY'))
BUCKET_NAME = os.getenv('S3_BUCKET_NAME', 'beba-storage')

# Email Setup
EMAIL_USER = os.getenv('EMAIL_USER')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(20), unique=True, nullable=False)
    full_name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(10), unique=True, nullable=False)
    id_number = db.Column(db.String(20), unique=True, nullable=False)
    kra_pin = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    profile_image_url = db.Column(db.String(200))
    id_verified = db.Column(db.Boolean, default=False)

class Vehicle(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    license_number = db.Column(db.String(20))
    vehicle_reg = db.Column(db.String(20), unique=True)
    vehicle_type = db.Column(db.String(50))
    tons = db.Column(db.Float)
    image_url = db.Column(db.String(200))
    status = db.Column(db.String(20), default='available')

class VehicleBooking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    customer_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    vehicle_id = db.Column(db.Integer, db.ForeignKey('vehicle.id'))
    pickup = db.Column(db.String(100))
    destination = db.Column(db.String(100))
    budget = db.Column(db.Float)
    commission = db.Column(db.Float)
    status = db.Column(db.String(20), default='pending')
    mpesa_code = db.Column(db.String(20))
    tracking_lat = db.Column(db.Float)
    tracking_lng = db.Column(db.Float)
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)

class ChatMessage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    booking_id = db.Column(db.Integer, db.ForeignKey('vehicle_booking.id'))
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    message = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)

class Rating(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    booking_id = db.Column(db.Integer, db.ForeignKey('vehicle_booking.id'))
    rater_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    ratee_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    rating = db.Column(db.Integer)
    comment = db.Column(db.Text)

class Insurance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    vehicle_reg = db.Column(db.String(20))
    logbook_url = db.Column(db.String(200))
    id_photo_url = db.Column(db.String(200))
    kra_pin = db.Column(db.String(20))
    insurer = db.Column(db.String(50))
    coverage_type = db.Column(db.String(50))
    valuation = db.Column(db.Float)
    cost = db.Column(db.Float)
    status = db.Column(db.String(20), default='pending')

class Rental(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    location = db.Column(db.String(100))
    house_type = db.Column(db.String(50))
    price = db.Column(db.Float)
    image_urls = db.Column(db.JSON)
    lat = db.Column(db.Float)
    lng = db.Column(db.Float)
    expiry = db.Column(db.DateTime)
    status = db.Column(db.String(20), default='active')

class Shamba(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    size = db.Column(db.Float)
    location = db.Column(db.String(100))
    price = db.Column(db.Float)
    title_deed_url = db.Column(db.String(200))
    image_urls = db.Column(db.JSON)
    lat = db.Column(db.Float)
    lng = db.Column(db.Float)
    expiry = db.Column(db.DateTime)
    status = db.Column(db.String(20), default='active')

class Apartment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    location = db.Column(db.String(100))
    size = db.Column(db.String(50))
    price = db.Column(db.Float)
    image_urls = db.Column(db.JSON)
    lat = db.Column(db.Float)
    lng = db.Column(db.Float)
    expiry = db.Column(db.DateTime)
    status = db.Column(db.String(20), default='active')

# Utility Functions
def send_email(to_email, subject, body):
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = EMAIL_USER
        msg['To'] = to_email
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logger.error(f"Email Error: {str(e)}")

def get_mpesa_access_token():
    try:
        consumer_key = os.getenv('MPESA_CONSUMER_KEY', 'your_safaricom_consumer_key')
        consumer_secret = os.getenv('MPESA_CONSUMER_SECRET', 'your_safaricom_consumer_secret')
        api_url = "https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials"
        headers = {"Authorization": "Basic " + base64.b64encode(f"{consumer_key}:{consumer_secret}".encode()).decode()}
        response = requests.get(api_url, headers=headers)
        return response.json()['access_token']
    except Exception as e:
        logger.error(f"MPesa Token Error: {str(e)}")
        raise

def initiate_stk_push(phone, amount, transaction_desc):
    try:
        access_token = get_mpesa_access_token()
        timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
        password = base64.b64encode(f"{os.getenv('MPESA_SHORTCODE', '174379')}{os.getenv('MPESA_PASSKEY', 'your_passkey')}{timestamp}".encode()).decode()
        payload = {
            "BusinessShortCode": os.getenv('MPESA_SHORTCODE', '174379'),
            "Password": password,
            "Timestamp": timestamp,
            "TransactionType": "CustomerPayBillOnline",
            "Amount": amount,
            "PartyA": phone,
            "PartyB": os.getenv('MPESA_SHORTCODE', '174379'),
            "PhoneNumber": phone,
            "CallBackURL": "https://yourdomain.com/mpesa/callback",
            "AccountReference": "BebaApp",
            "TransactionDesc": transaction_desc
        }
        headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
        response = requests.post("https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest", json=payload, headers=headers)
        return response.json()
    except Exception as e:
        logger.error(f"MPesa STK Push Error: {str(e)}")
        raise

def verify_with_iprs(id_number):
    try:
        # Placeholder for real IPRS API (replace with actual endpoint and credentials)
        api_key = os.getenv('IPRS_API_KEY', 'your_iprs_api_key')
        headers = {"Authorization": f"Bearer {api_key}"}
        response = requests.get(f"https://iprs.go.ke/api/verify/{id_number}", headers=headers)  # Replace with real URL
        data = response.json()
        return data.get('verified', False) and data.get('id_number') == id_number
    except Exception as e:
        logger.error(f"IPRS Verification Error: {str(e)}")
        return False  # Mock fallback for now

def upload_to_s3(file, path):
    filename = f"{path}_{datetime.datetime.now().timestamp()}.jpg"
    s3_client.upload_fileobj(file, BUCKET_NAME, filename)
    return f"https://{BUCKET_NAME}.s3.amazonaws.com/{filename}"

# Routes
@app.route('/signup', methods=['POST'])
def signup():
    try:
        data = request.json
        user_id = f"BA{data['id_number']}"
        
        if User.query.filter_by(email=data['email']).first():
            return jsonify({"error": "Email already exists"}), 400
        
        if not verify_with_iprs(data['id_number']):
            return jsonify({"error": "ID verification failed with IPRS"}), 400
        
        user = User(
            user_id=user_id,
            full_name=data['full_name'],
            phone=data['phone'],
            id_number=data['id_number'],
            kra_pin=data['kra_pin'],
            email=data['email'],
            password=generate_password_hash(data['password']),
            id_verified=True
        )
        db.session.add(user)
        db.session.commit()
        access_token = create_access_token(identity=user.id)
        send_email(user.email, "Welcome to Beba", "Your account is ready.")
        return jsonify({"message": "Signup successful", "access_token": access_token}), 201
    except SQLAlchemyError as e:
        db.session.rollback()
        logger.error(f"Database Error: {str(e)}")
        return jsonify({"error": "Database error occurred"}), 500

@app.route('/login', methods=['POST'])
def login():
    try:
        data = request.json
        user = User.query.filter_by(email=data['email']).first()
        if user and check_password_hash(user.password, data['password']):
            access_token = create_access_token(identity=user.id)
            return jsonify({"message": "Login successful", "access_token": access_token})
        return jsonify({"error": "Invalid credentials"}), 401
    except Exception as e:
        logger.error(f"Login Error: {str(e)}")
        return jsonify({"error": "An error occurred"}), 500

@app.route('/upload_profile_image', methods=['POST'])
@jwt_required()
def upload_profile_image():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        file = request.files['image']
        if file:
            profile_image_url = upload_to_s3(file, f"profiles/{user_id}")
            user.profile_image_url = profile_image_url
            db.session.commit()
            return jsonify({"message": "Profile image uploaded", "url": profile_image_url})
        return jsonify({"error": "No file provided"}), 400
    except Exception as e:
        logger.error(f"Profile Image Upload Error: {str(e)}")
        return jsonify({"error": "Failed to upload profile image"}), 500

# Vehicle Management
@app.route('/vehicles', methods=['POST'])
@jwt_required()
def add_vehicle():
    try:
        user_id = get_jwt_identity()
        data = request.json
        file = request.files.get('image')
        image_url = upload_to_s3(file, f"vehicles/{user_id}") if file else None
        
        vehicle = Vehicle(
            user_id=user_id,
            license_number=data.get('license_number'),
            vehicle_reg=data['vehicle_reg'],
            vehicle_type=data['vehicle_type'],
            tons=data.get('tons'),
            image_url=image_url
        )
        db.session.add(vehicle)
        db.session.commit()
        return jsonify({"message": "Vehicle added", "vehicle_id": vehicle.id})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Vehicle Add Error: {str(e)}")
        return jsonify({"error": "Failed to add vehicle"}), 500

@app.route('/vehicles', methods=['GET'])
@jwt_required()
def get_user_vehicles():
    try:
        user_id = get_jwt_identity()
        vehicles = Vehicle.query.filter_by(user_id=user_id).all()
        return jsonify([{"id": v.id, "vehicle_reg": v.vehicle_reg, "vehicle_type": v.vehicle_type, "tons": v.tons, "image_url": v.image_url, "status": v.status} for v in vehicles])
    except Exception as e:
        logger.error(f"Vehicle Fetch Error: {str(e)}")
        return jsonify({"error": "Failed to fetch vehicles"}), 500

@app.route('/vehicles/<int:vehicle_id>', methods=['DELETE'])
@jwt_required()
def remove_vehicle(vehicle_id):
    try:
        user_id = get_jwt_identity()
        vehicle = Vehicle.query.filter_by(id=vehicle_id, user_id=user_id).first()
        if not vehicle:
            return jsonify({"error": "Vehicle not found or not yours"}), 404
        db.session.delete(vehicle)
        db.session.commit()
        return jsonify({"message": "Vehicle removed"})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Vehicle Remove Error: {str(e)}")
        return jsonify({"error": "Failed to remove vehicle"}), 500

@app.route('/book_vehicle/<int:vehicle_id>', methods=['POST'])
@jwt_required()
def book_vehicle(vehicle_id):
    try:
        data = request.json
        vehicle = Vehicle.query.get(vehicle_id)
        if not vehicle or vehicle.status != 'available':
            return jsonify({"error": "Vehicle unavailable"}), 400
        
        commission = {'lorries': 300, 'transit': 350, 'vans': 300, 'cars': 300, 'multipurpose': 500, 'tow': 300, 'water': 300}.get(vehicle.vehicle_type.lower(), 300)
        booking = VehicleBooking(
            customer_id=get_jwt_identity(),
            vehicle_id=vehicle_id,
            pickup=data['pickup'],
            destination=data['destination'],
            budget=data['budget'],
            commission=commission
        )
        vehicle.status = 'booked'
        db.session.add(booking)
        db.session.commit()
        
        response = initiate_stk_push(data['phone'], commission, f"Beba {vehicle.vehicle_type} Commission")
        booking.mpesa_code = response.get('CheckoutRequestID')
        db.session.commit()
        
        socketio.emit('new_booking', {'booking_id': booking.id, 'vehicle_type': vehicle.vehicle_type, 'pickup': data['pickup']})
        send_email(User.query.get(booking.customer_id).email, "Booking Created", f"Booking ID: {booking.id}")
        return jsonify({"message": "Booking created", "booking_id": booking.id})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Booking Error: {str(e)}")
        return jsonify({"error": "Failed to create booking"}), 500

# Insurance, Rental, Shamba, Apartment Management (Add/Remove)
@app.route('/insurance', methods=['POST'])
@jwt_required()
def apply_insurance():
    try:
        user_id = get_jwt_identity()
        data = request.json
        files = request.files
        logbook_url = upload_to_s3(files['logbook'], f"insurance/{user_id}_logbook")
        id_photo_url = upload_to_s3(files['id_photo'], f"insurance/{user_id}_id")
        
        insurance = Insurance(
            user_id=user_id,
            vehicle_reg=data['vehicle_reg'],
            logbook_url=logbook_url,
            id_photo_url=id_photo_url,
            kra_pin=data['kra_pin'],
            insurer=data['insurer'],
            coverage_type=data['coverage_type'],
            valuation=data['valuation'],
            cost=data['cost']
        )
        db.session.add(insurance)
        db.session.commit()
        send_email(User.query.get(user_id).email, "Insurance Application", f"Your application for {data['vehicle_reg']} is under review.")
        return jsonify({"message": "Insurance application submitted", "insurance_id": insurance.id})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Insurance Error: {str(e)}")
        return jsonify({"error": "Failed to apply for insurance"}), 500

@app.route('/rentals', methods=['POST'])
@jwt_required()
def list_rental():
    try:
        user_id = get_jwt_identity()
        data = request.json
        files = request.files.getlist('images')
        image_urls = [upload_to_s3(file, f"rentals/{user_id}_{i}") for i, file in enumerate(files)]
        
        response = initiate_stk_push(User.query.get(user_id).phone, 100, "Beba Rental Listing")
        if response.get('ResponseCode') == '0':
            rental = Rental(
                user_id=user_id,
                location=data['location'],
                house_type=data['house_type'],
                price=data['price'],
                image_urls=image_urls,
                lat=data['lat'],
                lng=data['lng'],
                expiry=datetime.datetime.utcnow() + datetime.timedelta(days=30)
            )
            db.session.add(rental)
            db.session.commit()
            return jsonify({"message": "Rental listed", "rental_id": rental.id})
        return jsonify({"error": "Payment failed"}), 400
    except Exception as e:
        db.session.rollback()
        logger.error(f"Rental Error: {str(e)}")
        return jsonify({"error": "Failed to list rental"}), 500

@app.route('/rentals/<int:rental_id>', methods=['DELETE'])
@jwt_required()
def remove_rental(rental_id):
    try:
        user_id = get_jwt_identity()
        rental = Rental.query.filter_by(id=rental_id, user_id=user_id).first()
        if not rental:
            return jsonify({"error": "Rental not found or not yours"}), 404
        db.session.delete(rental)
        db.session.commit()
        return jsonify({"message": "Rental removed"})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Rental Remove Error: {str(e)}")
        return jsonify({"error": "Failed to remove rental"}), 500

@app.route('/shamba', methods=['POST'])
@jwt_required()
def list_shamba():
    try:
        user_id = get_jwt_identity()
        data = request.json
        files = request.files
        title_deed_url = upload_to_s3(files['title_deed'], f"shamba/{user_id}_title")
        image_urls = [upload_to_s3(file, f"shamba/{user_id}_{i}") for i, file in enumerate(files.getlist('images'))]
        
        response = initiate_stk_push(User.query.get(user_id).phone, 100, "Beba Shamba Listing")
        if response.get('ResponseCode') == '0':
            shamba = Shamba(
                user_id=user_id,
                size=data['size'],
                location=data['location'],
                price=data['price'],
                title_deed_url=title_deed_url,
                image_urls=image_urls,
                lat=data['lat'],
                lng=data['lng'],
                expiry=datetime.datetime.utcnow() + datetime.timedelta(days=30)
            )
            db.session.add(shamba)
            db.session.commit()
            return jsonify({"message": "Shamba listed", "shamba_id": shamba.id})
        return jsonify({"error": "Payment failed"}), 400
    except Exception as e:
        db.session.rollback()
        logger.error(f"Shamba Error: {str(e)}")
        return jsonify({"error": "Failed to list shamba"}), 500

@app.route('/shamba/<int:shamba_id>', methods=['DELETE'])
@jwt_required()
def remove_shamba(shamba_id):
    try:
        user_id = get_jwt_identity()
        shamba = Shamba.query.filter_by(id=shamba_id, user_id=user_id).first()
        if not shamba:
            return jsonify({"error": "Shamba not found or not yours"}), 404
        db.session.delete(shamba)
        db.session.commit()
        return jsonify({"message": "Shamba removed"})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Shamba Remove Error: {str(e)}")
        return jsonify({"error": "Failed to remove shamba"}), 500

@app.route('/apartments', methods=['POST'])
@jwt_required()
def list_apartment():
    try:
        user_id = get_jwt_identity()
        data = request.json
        files = request.files.getlist('images')
        image_urls = [upload_to_s3(file, f"apartments/{user_id}_{i}") for i, file in enumerate(files)]
        
        response = initiate_stk_push(User.query.get(user_id).phone, 100, "Beba Apartment Listing")
        if response.get('ResponseCode') == '0':
            apartment = Apartment(
                user_id=user_id,
                location=data['location'],
                size=data['size'],
                price=data['price'],
                image_urls=image_urls,
                lat=data['lat'],
                lng=data['lng'],
                expiry=datetime.datetime.utcnow() + datetime.timedelta(days=30)
            )
            db.session.add(apartment)
            db.session.commit()
            return jsonify({"message": "Apartment listed", "apartment_id": apartment.id})
        return jsonify({"error": "Payment failed"}), 400
    except Exception as e:
        db.session.rollback()
        logger.error(f"Apartment Error: {str(e)}")
        return jsonify({"error": "Failed to list apartment"}), 500

@app.route('/apartments/<int:apartment_id>', methods=['DELETE'])
@jwt_required()
def remove_apartment(apartment_id):
    try:
        user_id = get_jwt_identity()
        apartment = Apartment.query.filter_by(id=apartment_id, user_id=user_id).first()
        if not apartment:
            return jsonify({"error": "Apartment not found or not yours"}), 404
        db.session.delete(apartment)
        db.session.commit()
        return jsonify({"message": "Apartment removed"})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Apartment Remove Error: {str(e)}")
        return jsonify({"error": "Failed to remove apartment"}), 500

@app.route('/listings/<type>', methods=['GET'])
def get_listings(type):
    try:
        if type == 'vehicles':
            listings = Vehicle.query.filter_by(status='available').all()
            return jsonify([{"id": v.id, "vehicle_reg": v.vehicle_reg, "vehicle_type": v.vehicle_type, "tons": v.tons, "image_url": v.image_url} for v in listings])
        elif type == 'rentals':
            listings = Rental.query.filter_by(status='active').all()
            return jsonify([{"id": r.id, "location": r.location, "house_type": r.house_type, "price": r.price, "images": r.image_urls} for r in listings])
        elif type == 'shamba':
            listings = Shamba.query.filter_by(status='active').all()
            return jsonify([{"id": s.id, "size": s.size, "location": s.location, "price": s.price, "images": s.image_urls} for s in listings])
        elif type == 'apartments':
            listings = Apartment.query.filter_by(status='active').all()
            return jsonify([{"id": a.id, "size": a.size, "location": a.location, "price": a.price, "images": a.image_urls} for a in listings])
        return jsonify({"error": "Invalid type"}), 400
    except Exception as e:
        logger.error(f"Listings Error: {str(e)}")
        return jsonify({"error": "Failed to fetch listings"}), 500

if __name__ == '__main__':
    db.create_all()
    socketio.run(app, ssl_context='adhoc')
