#dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beba Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <!-- Google Maps API with Places Library -->
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap" async defer></script>
    <!-- MarkerClusterer -->
    <script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>
</head>
<body>
    <header class="bg-primary text-white text-center py-4">
        <h1>Beba Dashboard</h1>
        <button class="btn btn-light position-absolute top-0 end-0 m-3" onclick="logout()">Logout</button>
    </header>

    <section class="container my-5">
        <div class="row">
            <div class="col-md-4">
                <div class="card p-3">
                    <h3>Add Listing</h3>
                    <select id="listing-type" class="form-select mb-3" onchange="updateListingFields()">
                        <option value="vehicle">Vehicle</option>
                        <option value="rental">Rental</option>
                        <option value="shamba">Shamba</option>
                        <option value="apartment">Apartment</option>
                    </select>
                    <form id="add-listing-form" onsubmit="addListing(event)">
                        <div id="listing-fields"></div>
                        <div id="map-container" class="mb-3" style="display: none;">
                            <input type="text" id="search-input" class="form-control mb-2" placeholder="Search location">
                            <div id="map" style="height: 200px; width: 100%;"></div>
                            <input type="hidden" id="lat" name="lat">
                            <input type="hidden" id="lng" name="lng">
                        </div>
                        <button type="button" class="btn btn-secondary w-100 mb-3" onclick="toggleMap()" id="map-toggle-btn">Pick Location</button>
                        <button type="submit" class="btn btn-primary w-100">Add Listing</button>
                    </form>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card p-3 mb-4">
                    <h3>My Listings</h3>
                    <div id="my-listings-map" style="height: 300px; width: 100%; margin-bottom: 15px;"></div>
                    <div id="my-listings"></div>
                </div>
                <div class="card p-3">
                    <h3>Book a Vehicle</h3>
                    <div id="available-vehicles"></div>
                </div>
            </div>
        </div>
    </section>

    <footer class="bg-dark text-white text-center py-3">
        <p>Â© 2025 Beba. All rights reserved.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="scripts.js"></script>
    <script>
        loadDashboard();
    </script>
</body>
</html>



# styles.css
body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
}

header {
    background: linear-gradient(90deg, #007bff, #00b4db);
}

.card {
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn-primary {
    background-color: #007bff;
    border: none;
}

.btn-primary:hover {
    background-color: #0056b3;
}

footer {
    position: fixed;
    bottom: 0;
    width: 100%;
}

#map, #my-listings-map {
    border-radius: 5px;
    border: 1px solid #ddd;
}

#search-input {
    z-index: 10;
}

.gm-style-iw {
    max-width: 200px !important; /* Limit info window width */
}



# scripts.js
const API_URL = 'https://yourdomain.com'; // Replace with your Flask backend URL
let token = localStorage.getItem('token');
let map, marker, myListingsMap, autocomplete, infoWindow;

// Google Maps Initialization
function initMap() {
    // Add Listing Map
    map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: -1.2921, lng: 36.8219 }, // Default: Nairobi, Kenya
        zoom: 12
    });

    marker = new google.maps.Marker({
        map: map,
        draggable: true
    });

    google.maps.event.addListener(marker, 'dragend', () => {
        const position = marker.getPosition();
        document.getElementById('lat').value = position.lat();
        document.getElementById('lng').value = position.lng();
    });

    // Places API Search Bar
    const searchInput = document.getElementById('search-input');
    autocomplete = new google.maps.places.Autocomplete(searchInput);
    autocomplete.bindTo('bounds', map);
    autocomplete.addListener('place_changed', () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) return;

        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(15);
        }
        marker.setPosition(place.geometry.location);
        document.getElementById('lat').value = place.geometry.location.lat();
        document.getElementById('lng').value = place.geometry.location.lng();
    });

    // My Listings Map
    myListingsMap = new google.maps.Map(document.getElementById('my-listings-map'), {
        center: { lat: -1.2921, lng: 36.8219 },
        zoom: 10
    });

    infoWindow = new google.maps.InfoWindow();
}

// Auth Functions
function showLogin() {
    document.getElementById('login-form').style.display = 'block';
    document.getElementById('signup-form').style.display = 'none';
}

function showSignup() {
    document.getElementById('signup-form').style.display = 'block';
    document.getElementById('login-form').style.display = 'none';
}

async function login(event) {
    event.preventDefault();
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    try {
        const response = await axios.post(`${API_URL}/login`, { email, password });
        token = response.data.access_token;
        localStorage.setItem('token', token);
        window.location.href = 'dashboard.html';
    } catch (error) {
        alert(error.response?.data?.error || 'Login failed');
    }
}

async function signup(event) {
    event.preventDefault();
    const data = {
        full_name: document.getElementById('signup-fullname').value,
        phone: document.getElementById('signup-phone').value,
        id_number: document.getElementById('signup-id').value,
        kra_pin: document.getElementById('signup-kra').value,
        email: document.getElementById('signup-email').value,
        password: document.getElementById('signup-password').value,
    };

    try {
        const response = await axios.post(`${API_URL}/signup`, data);
        alert('Signup successful! Please login.');
        showLogin();
    } catch (error) {
        alert(error.response?.data?.error || 'Signup failed');
    }
}

function logout() {
    localStorage.removeItem('token');
    window.location.href = 'index.html';
}

// Dashboard Functions
function loadDashboard() {
    if (!token) {
        window.location.href = 'index.html';
        return;
    }
    updateListingFields();
    loadMyListings();
    loadAvailableVehicles();
}

function updateListingFields() {
    const type = document.getElementById('listing-type').value;
    const fieldsDiv = document.getElementById('listing-fields');
    const mapContainer = document.getElementById('map-container');
    fieldsDiv.innerHTML = '';
    mapContainer.style.display = type === 'vehicle' ? 'none' : 'block';

    if (type === 'vehicle') {
        fieldsDiv.innerHTML = `
            <input type="text" class="form-control mb-2" id="vehicle-reg" placeholder="Vehicle Registration" required>
            <input type="text" class="form-control mb-2" id="vehicle-type" placeholder="Vehicle Type" required>
            <input type="number" class="form-control mb-2" id="tons" placeholder="Tons">
            <input type="file" class="form-control mb-2" id="vehicle-image">
        `;
    } else if (type === 'rental') {
        fieldsDiv.innerHTML = `
            <input type="text" class="form-control mb-2" id="location" placeholder="Location" required>
            <input type="text" class="form-control mb-2" id="house-type" placeholder="House Type" required>
            <input type="number" class="form-control mb-2" id="price" placeholder="Price" required>
            <input type="file" class="form-control mb-2" id="images" multiple>
        `;
    } else if (type === 'shamba') {
        fieldsDiv.innerHTML = `
            <input type="number" class="form-control mb-2" id="size" placeholder="Size (acres)" required>
            <input type="text" class="form-control mb-2" id="location" placeholder="Location" required>
            <input type="number" class="form-control mb-2" id="price" placeholder="Price" required>
            <input type="file" class="form-control mb-2" id="title-deed" required>
            <input type="file" class="form-control mb-2" id="images" multiple>
        `;
    } else if (type === 'apartment') {
        fieldsDiv.innerHTML = `
            <input type="text" class="form-control mb-2" id="location" placeholder="Location" required>
            <input type="text" class="form-control mb-2" id="size" placeholder="Size (e.g., 2 Bedrooms)" required>
            <input type="number" class="form-control mb-2" id="price" placeholder="Price" required>
            <input type="file" class="form-control mb-2" id="images" multiple>
        `;
    }
}

function toggleMap() {
    const mapContainer = document.getElementById('map-container');
    mapContainer.style.display = mapContainer.style.display === 'none' ? 'block' : 'none';
    if (mapContainer.style.display === 'block') {
        google.maps.event.trigger(map, 'resize');
        map.setCenter({ lat: -1.2921, lng: 36.8219 });
        marker.setPosition(map.getCenter());
    }
}

async function addListing(event) {
    event.preventDefault();
    const type = document.getElementById('listing-type').value;
    const formData = new FormData();

    if (type === 'vehicle') {
        formData.append('vehicle_reg', document.getElementById('vehicle-reg').value);
        formData.append('vehicle_type', document.getElementById('vehicle-type').value);
        formData.append('tons', document.getElementById('tons').value || '');
        const image = document.getElementById('vehicle-image').files[0];
        if (image) formData.append('image', image);
    } else if (type === 'rental') {
        formData.append('location', document.getElementById('location').value);
        formData.append('house_type', document.getElementById('house-type').value);
        formData.append('price', document.getElementById('price').value);
        formData.append('lat', document.getElementById('lat').value || '');
        formData.append('lng', document.getElementById('lng').value || '');
        const images = document.getElementById('images').files;
        for (let i = 0; i < images.length; i++) formData.append('images', images[i]);
    } else if (type === 'shamba') {
        formData.append('size', document.getElementById('size').value);
        formData.append('location', document.getElementById('location').value);
        formData.append('price', document.getElementById('price').value);
        formData.append('lat', document.getElementById('lat').value || '');
        formData.append('lng', document.getElementById('lng').value || '');
        formData.append('title_deed', document.getElementById('title-deed').files[0]);
        const images = document.getElementById('images').files;
        for (let i = 0; i < images.length; i++) formData.append('images', images[i]);
    } else if (type === 'apartment') {
        formData.append('location', document.getElementById('location').value);
        formData.append('size', document.getElementById('size').value);
        formData.append('price', document.getElementById('price').value);
        formData.append('lat', document.getElementById('lat').value || '');
        formData.append('lng', document.getElementById('lng').value || '');
        const images = document.getElementById('images').files;
        for (let i = 0; i < images.length; i++) formData.append('images', images[i]);
    }

    try {
        const response = await axios.post(`${API_URL}/${type}s`, formData, {
            headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'multipart/form-data' }
        });
        alert(`${type} listed successfully!`);
        loadMyListings();
    } catch (error) {
        alert(error.response?.data?.error || 'Failed to add listing');
    }
}

async function loadMyListings() {
    try {
        const vehicles = await axios.get(`${API_URL}/vehicles`, { headers: { 'Authorization': `Bearer ${token}` } });
        const rentals = await axios.get(`${API_URL}/listings/rentals`, { headers: { 'Authorization': `Bearer ${token}` } });
        const shamba = await axios.get(`${API_URL}/listings/shamba`, { headers: { 'Authorization': `Bearer ${token}` } });
        const apartments = await axios.get(`${API_URL}/listings/apartments`, { headers: { 'Authorization': `Bearer ${token}` } });

        const listingsDiv = document.getElementById('my-listings');
        listingsDiv.innerHTML = `
            <h4>Vehicles</h4>
            ${vehicles.data.map(v => `<p>${v.vehicle_type} - ${v.vehicle_reg} <button class="btn btn-danger btn-sm" onclick="removeListing('vehicles', ${v.id})">Remove</button></p>`).join('')}
            <h4>Rentals</h4>
            ${rentals.data.map(r => `<p>${r.house_type} - ${r.location} <button class="btn btn-danger btn-sm" onclick="removeListing('rentals', ${r.id})">Remove</button></p>`).join('')}
            <h4>Shamba</h4>
            ${shamba.data.map(s => `<p>${s.size} acres - ${s.location} <button class="btn btn-danger btn-sm" onclick="removeListing('shamba', ${s.id})">Remove</button></p>`).join('')}
            <h4>Apartments</h4>
            ${apartments.data.map(a => `<p>${a.size} - ${a.location} <button class="btn btn-danger btn-sm" onclick="removeListing('apartments', ${a.id})">Remove</button></p>`).join('')}
        `;

        // Plot listings on map with info windows and clustering
        const allListings = [
            ...rentals.data.map(r => ({
                lat: r.lat,
                lng: r.lng,
                title: `${r.house_type} - ${r.location}`,
                content: `<div><strong>Rental</strong><br>Type: ${r.house_type}<br>Location: ${r.location}<br>Price: Ksh ${r.price}</div>`
            })),
            ...shamba.data.map(s => ({
                lat: s.lat,
                lng: s.lng,
                title: `${s.size} acres - ${s.location}`,
                content: `<div><strong>Shamba</strong><br>Size: ${s.size} acres<br>Location: ${s.location}<br>Price: Ksh ${s.price}</div>`
            })),
            ...apartments.data.map(a => ({
                lat: a.lat,
                lng: a.lng,
                title: `${a.size} - ${a.location}`,
                content: `<div><strong>Apartment</strong><br>Size: ${a.size}<br>Location: ${a.location}<br>Price: Ksh ${a.price}</div>`
            }))
        ].filter(l => l.lat && l.lng); // Only include listings with coordinates

        const markers = allListings.map(listing => {
            const marker = new google.maps.Marker({
                position: { lat: parseFloat(listing.lat), lng: parseFloat(listing.lng) },
                title: listing.title
            });

            marker.addListener('click', () => {
                infoWindow.setContent(listing.content);
                infoWindow.open(myListingsMap, marker);
            });

            return marker;
        });

        // Add Marker Clustering
        new markerClusterer.MarkerClusterer({
            map: myListingsMap,
            markers: markers,
            renderer: {
                render: ({ count, position }) => new google.maps.Marker({
                    label: { text: String(count), color: "white", fontSize: "12px" },
                    position,
                    icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                        scaledSize: new google.maps.Size(40, 40)
                    },
                    zIndex: Math.max(1000, Math.min(10000, count))
                })
            }
        });

        if (allListings.length > 0) {
            const bounds = new google.maps.LatLngBounds();
            allListings.forEach(l => bounds.extend({ lat: parseFloat(l.lat), lng: parseFloat(l.lng) }));
            myListingsMap.fitBounds(bounds);
        }
    } catch (error) {
        console.error('Failed to load listings:', error);
    }
}

async function removeListing(type, id) {
    try {
        await axios.delete(`${API_URL}/${type}/${id}`, { headers: { 'Authorization': `Bearer ${token}` } });
        alert(`${type} removed successfully!`);
        loadMyListings();
    } catch (error) {
        alert(error.response?.data?.error || 'Failed to remove listing');
    }
}

async function loadAvailableVehicles() {
    try {
        const response = await axios.get(`${API_URL}/listings/vehicles`, { headers: { 'Authorization': `Bearer ${token}` } });
        const vehiclesDiv = document.getElementById('available-vehicles');
        vehiclesDiv.innerHTML = response.data.map(v => `
            <p>${v.vehicle_type} - ${v.vehicle_reg} <button class="btn btn-primary btn-sm" onclick="bookVehicle(${v.id})">Book</button></p>
        `).join('');
    } catch (error) {
        console.error('Failed to load vehicles:', error);
    }
}

async function bookVehicle(vehicleId) {
    const pickup = prompt('Enter pickup location:');
    const destination = prompt('Enter destination:');
    const budget = prompt('Enter budget:');

    try {
        const response = await axios.post(`${API_URL}/book_vehicle/${vehicleId}`, { pickup, destination, budget }, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        alert('Booking successful! Check your phone for payment.');
    } catch (error) {
        alert(error.response?.data?.error || 'Booking failed');
    }
}






